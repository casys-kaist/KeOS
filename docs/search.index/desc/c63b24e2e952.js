rd_("ClAccessed; indicates whether this entry has been used for \xe2\x80\xa600CiAccessed; indicates whether software has accessed the \xe2\x80\xa6ChDirty; indicates whether software has written to the \xe2\x80\xa6CnGlobal; if CR4.PGE = 1, determines whether the translation \xe2\x80\xa6ClPresent; must be 1 to reference a page-directory-pointer \xe2\x80\xa6C`Present; must be 1 to reference a page directoryBlPresent; must be 1 to reference a page tableBhPresent; must be 1 to map a 4-KByte pageCnFor ordinary paging, ignored; for HLAT paging, restart (if \xe2\x80\xa6000BfSpinlock guard for the raw block data.BmSpinlock guard protecting the block contents.CgThe in-memory contents of the block, protected by a \xe2\x80\xa6CcPage size; indicates whether this entry is 2M page.AnRepresents a physical address.CfRead/write; if 0, writes may not be allowed to the \xe2\x80\xa6CnRead/write; if 0, writes may not be allowed to the 1-GByte \xe2\x80\xa6CnRead/write; if 0, writes may not be allowed to the 2-MByte \xe2\x80\xa6CnRead/write; if 0, writes may not be allowed to the 4-KByte \xe2\x80\xa6ChA receive endpoint for interprocess communication (IPC).CiA transmit endpoint for interprocess communication (IPC).CmUser/supervisor; if 0, user-mode accesses are not allowed \xe2\x80\xa6000AmRepresents a virtual address.ClIf IA32_EFER.NXE = 1, execute-disable (if 1, instruction \xe2\x80\xa6000CeMarker to associate the block with its metadata type.0DaMarker to associate this block with metadata type <code>M</code>.AgFilesystem abstraction.C`The file system that the page cache operates on.BnI/O interface for reading/writing disk blocks.AbMemory Management.BfGet the physical address of this page.0CbGet the physical address pointed to by this entry.000BhGet physical address of this page table.lR8 register.lR9 register.AhMake the disk read-only.CkOn-disk superblock structure, wrapped in metadata-aware \xe2\x80\xa6AcJournal superblock.BbA stack pointer on context switch.BbReturns the current stack pointer.BmMutable reference to the ongoing transaction.CjStaged list of (LBA, data) pairs representing metadata \xe2\x80\xa6AeThe type of the file:ChIf va is Some, invalidate only that page. Otherwise, \xe2\x80\xa6ClThe virtual address (VA) associated with this page table \xe2\x80\xa6BaRepresents an ELF file in memory.ClIndirectly determines the memory type used to access the \xe2\x80\xa6CnPage-level cache disable; indirectly determines the memory \xe2\x80\xa6000CnPage-level write-through; indirectly determines the memory \xe2\x80\xa6000AkPage Directory Entry (PDE).AgPage Table Entry (PTE).BdThread-Local Storage (TLS) template.BkIdentifies the target operating system ABI.BeReturns the set containing all flags.0000000oDestination Cr3BmThe current working directory of the process.AlUtility to parsing ELF file.BkThe file block number this slot represents.AgFast File System (FFS).AoA reference to the file system.CgWeak reference to the <code>FastFileSystemInner</code>.BlWeak reference to the file system reference.BkReference to the filesystem\xe2\x80\x99s core state.DaReads a value of type <code>T</code> from the user-space address.DhReads data from the user-space buffer into a <code>Vec&lt;u8&gt;</code>.CnRetrieves the logical block address (LBA) corresponding to \xe2\x80\xa6CmReturns a mutable reference to the value corresponding to \xe2\x80\xa6AiInode number of the file.AnInode number of the directory.EdGet <code>InodeNumber</code> of this <code>File</code> regardless of its inner type.BeReturns the inode number of the file.BjReturns the inode number of the directory.ChThe inode number corresponding to the file or directory.CkThe unique inode number assigned to this file or directory.065BlGet the kernel virtual address of this page.BaGet virtual address of this page.1CbLogical block address of the block being modified.CkLogical block address (LBA) where this block resides on \xe2\x80\xa6BbA Least Recently Used (LRU) Cache.EeMap a virtual address (<code>va</code>) to a physical page (<code>pg</code>) with theCgCreates a new physical address if the address is valid.CfCreates a new virtual address if the address is valid.AgCreate a new Allocator.BmCreate a new slab allocator with slab size T.BfCreates a new <code>AtomicBool</code>.BeCreates a new <code>AtomicPtr</code>.AmCreates a new atomic integer.000000000CjCreates a new spinlock in an unlocked state ready for use.DlCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.CiCreate a new thread builder for thread <code>name</code>.BcCreate a new FsDisk from the index.CnCreates a new <code>RegularFile</code> handle from a given \xe2\x80\xa6DkCreates a new <code>Directory</code> handle from a given implementation \xe2\x80\xa6DbCreates a <code>InodeNumber</code> if the given value is not zero.A`Allocate a page.AdAllocate a new page.AkCreate a new StaleTLBEntry.BoCreates a new register frame for a user thread.DkCreates a new <code>UserPtrRO</code> instance with the given user-space \xe2\x80\xa6DkCreates a new <code>UserPtrWO</code> instance with the given user-space \xe2\x80\xa6DdCreates a new <code>UserU8SliceRO</code> instance with the given \xe2\x80\xa6DdCreates a new <code>UserU8SliceWO</code> instance with the given \xe2\x80\xa6DbCreates a new <code>UserCString</code> instance with the given \xe2\x80\xa6CnCreates a new <strong>COM1</strong> serial interface instance.CbCreates a new instance of <code>FileStruct</code>.CbCreates a new instance of <code>EagerPager</code>.DcCreates a new <code>StackBuilder</code> instance for building a \xe2\x80\xa6DjCreates a new <code>MmStruct</code> with an empty page table and a new \xe2\x80\xa6AkCreate an empty page table.BdCreates a new instance of the pager.CaCreates a new instance of <code>LazyPager</code>.DbProbe the cause of page fault into a <code>PageFaultReason</code>.CiCreates a new condition variable which is ready to be \xe2\x80\xa6CgCreates a new mutex in an unlocked state ready for use.ChCreates a new semaphore initialized with a specified \xe2\x80\xa6BoCreate a new <code>RoundRobin</code> scheduler.BoCreate a <code>Stat</code> struct for the file.CdCreates a new in-memory <code>Inode</code> instance.CaCreate a new <code>TrackedInode</code> reference.ChCreates a new, empty journal <code>TxBegin</code> block.CfCreates a new, empty journal <code>TxEnd</code> block.DhCreates a new <code>RegularFile</code> from a given inode and filesystemCjCreates a new <code>Directory</code> from the given inode.EcCreates a new <code>JournalWriter</code> in the initial <code>TxBegin</code> stage.DhCreates a <code>LogicalBlockAddress</code> if the given value is not \xe2\x80\xa6BiMakes a new, empty <code>LRUCache</code>.ClCreate a new slot for the given file, block, and backing \xe2\x80\xa6CjCreate a new page cache associated with the given file \xe2\x80\xa6BlReturns the complement of this set of flags.0000000BdUnused padding bytes (must be zero).CfPin current thread not to be scheduled by blocking \xe2\x80\xa6D`Writes a value of type <code>T</code> to the user-space address.CbWrites data from a slice to the user-space buffer.ChInserts a key-value pair into the <code>LRUCache</code>.mR10 register.mR11 register.mR12 register.mR13 register.mR14 register.mR15 register.mRAX register.mRBP register.mRBX register.mRCX register.mRDI register.mRDX register.DkReturns a mutable reference to the instruction pointer (<code>RIP</code>\xe2\x80\xa6mRSI register.DdReturns a mutable reference to the stack pointer (<code>RSP</code>).AjSlab allocator for Slab64.CkInserts or removes the specified flags depending on the \xe2\x80\xa60000000CdReturns the set difference of the two sets of flags.0000000iThread idAiThread id of this handle.AeTLB Shootdown helper.B`Device or resource busy. (EBUSY)BfThe disk, a device that has byte sink.AoTerminates the calling process.0AnTerminates the calling thread.0AoA First-in-first-out scheduler.CnRepresents a file system entry, which can be either a file \xe2\x80\xa6DfThe <code>File</code> struct represents an abstraction over a file \xe2\x80\xa6AaFork the process.00DkThe data could not be sent on the <code>channel</code> because it would \xe2\x80\xa6oThread is idle.EcAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.AaLoadable segment.oMap the memory.000iNo value.AfAuxiliary information.oUnused segment.BkOpens a file and returns a file descriptor.0000CmProtection key bit 0; if CR4.PKE = 1 or CR4.PKS = 1, this \xe2\x80\xa6CmProtection key bit 1; if CR4.PKE = 1 or CR4.PKS = 1, this \xe2\x80\xa6CmProtection key bit 2; if CR4.PKE = 1 or CR4.PKS = 1, this \xe2\x80\xa6CmProtection key bit 3; if CR4.PKE = 1 or CR4.PKS = 1, this \xe2\x80\xa6BbA representation of a memory page.BjPage Directory Pointer Table Entry (PDPE).BgELF program header for 64-bit binaries.AlProgram header table itself.BmCreate an interprocess communication channel.0000AaPage is readable.AdSegment is readable.AmRead-only access to the file.BbReads data from a file descriptor.0000BfMoves the file offset of an open file.0000BaA single entry in the page cache.BbSome value of type <code>T</code>.lStat a file.ChRepresents the basic metadata of a file or directory \xe2\x80\xa6ChRepresents a <strong>task</strong> executed by a thread.BbRetrieves the current file offset.0000CkWhen set, the page fault was caused while CPL = 3. This \xe2\x80\xa6BiPage can be referred by user application.1BdThe physical address <code>0</code>.BjPadding to fill a full block (4096 bytes).AoPadding to align to Block size.BgA padding to align to the power of two.BcFirst argument for the system call.BdSecond argument for the system call.BcThird argument for the system call.BdFourth argument for the system call.BcFifth argument for the system call.BcSixth argument for the system call.CdReturns the raw value of the flags currently stored.0000000BoSpecifies little-endian or big-endian encoding.CbThe underlying disk device used by the filesystem.ClEnsures the spinlock is released when the guard goes out \xe2\x80\xa6DcPanics if the guard is dropped without calling <code>submit</code>.0CdExit the current thread with <code>exit_code</code>.oExit a process.0AhExit the current thread.AjThe kernel file structure.DhA <code>RegularFile</code> object, which holds the underlying kernel \xe2\x80\xa6CbReference to the backing file containing ELF data.AnThe file this slot belongs to.CmFinds the inode number corresponding to a directory entry \xe2\x80\xa6Cb<code>Fork</code> with Copy-On-Write optimization.ClCreates a new process by duplicating the current process \xe2\x80\xa6AoReturns the argument unchanged.000000000000000CmConverts a <code>bool</code> into an <code>AtomicBool</code>.1DgConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.2CjConverts an <code>i8</code> into an <code>AtomicI8</code>.3CjConverts an <code>u8</code> into an <code>AtomicU8</code>.ClConverts an <code>i16</code> into an <code>AtomicI16</code>.5ClConverts an <code>u16</code> into an <code>AtomicU16</code>.66ClConverts an <code>i32</code> into an <code>AtomicI32</code>.7ClConverts an <code>u32</code> into an <code>AtomicU32</code>.8ClConverts an <code>i64</code> into an <code>AtomicI64</code>.9ClConverts an <code>u64</code> into an <code>AtomicU64</code>.:D`Converts an <code>isize</code> into an <code>AtomicIsize</code>.D`Converts an <code>usize</code> into an <code>AtomicUsize</code>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<ClGrow the internal blocks by allocating from the physical \xe2\x80\xa6CkGrows the inode to include at least the given number of \xe2\x80\xa6AhAdd a hook for the disk.BdTransmute this thread into the idle.AoDisplay an information message.0BaCalls <code>U::from(self)</code>.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CmReturns an iterator that will block waiting for messages, \xe2\x80\xa6BgJoin this handle and returns exit code.BhKeOS: KAIST Educational Operating SystemAmRust-specific implemenations.CdArray of logical block addresses involved in the \xe2\x80\xa6AlLoads a value from the bool.AoLoads a value from the pointer.BfLoads a value from the atomic integer.000000000CmCreates a new memory state and initializes a user process \xe2\x80\xa6CkLoads and returns the content for the page at the given \xe2\x80\xa6CiReturns a zero-filled page for the given virtual address.CiLoads a page from the file based on the given virtual \xe2\x80\xa6CiLoads a metadata structure from disk at the specified \xe2\x80\xa6CmAcquires a spinlock, blocking the current thread until it \xe2\x80\xa6CmAcquires a mutex, blocking the current thread until it is \xe2\x80\xa6AnMaps a file block into memory.0CiMemory map function (<code>mmap</code>) for eager paging.CgMaps a file into the process\xe2\x80\x99s virtual address space.CmMaps a virtual memory region into the process\xe2\x80\x99s address \xe2\x80\xa6ChMemory map function (<code>mmap</code>) for lazy paging.AjMake mmio register groups.CcThe access mode of the file (e.g., read, write, \xe2\x80\xa6kThread nameBlThe name of entry in null-terminated string.CjReturns the name of the directory entry as a string slice.DkThe name of the file or directory. Only the first <code>name_len</code> \xe2\x80\xa6B`Opens a path from the directory.mOpens a file.BoThe backing page containing the block\xe2\x80\x99s data.AlPage Directory Index (PDEI).AgPermission of the area.CmCreates an interprocess communication channel between two \xe2\x80\xa6AhPage Table Index (PTEI).CkLocks this rwlock with shared read access, blocking the \xe2\x80\xa6BnRead 512 bytes from disk starting from sector.CbReads data from the file into the provided buffer.0CkReads a null-terminated string from the user-space address.AmReads data from the teletype.BkReads data from the serial teletype (COM1).AmReads data from an open file.CfAcquires a read-only guard to the underlying block \xe2\x80\xa6CcAcquires a shared read lock on the in-memory inode.6CeRead a page from the cache or underlying file system.ClAttempts to wait for a value on this receiver, returning \xe2\x80\xa6DfA mutable reference to the <code>Registers</code> structure, which \xe2\x80\xa6CeInitial CPU register values for the user process, \xe2\x80\xa6BoRetrieves the root directory of the filesystem.0AkSlab allocator for Slab128.AkSlab allocator for Slab256.AkSlab allocator for Slab512.BdSeeks to a new position in the file.AnSends a value on this channel.CkSend the request and wait until the request is done for \xe2\x80\xa6BfReturns the size of the file in bytes.0D`Get size of this <code>File</code> regardless of its inner type.11AnThe size of the file in bytes.BdThe total size of the file in bytes.033oSlab allocator.AhRetrieves file metadata.CkStores a value into the bool, returning the previous value.CkStores a value into the pointer, returning the previous \xe2\x80\xa6CiStores a value into the atomic integer, returning the \xe2\x80\xa6000000000AkSynchronization primitives.AkSynchronization Primitives.BjTask trait for interact with user process.BgTells the current position in the file.AdDebugging Utilities.ClWaits until a permit becomes available and then acquires \xe2\x80\xa6ChWalk through the page table to find reference to the \xe2\x80\xa6CiMarker type for the second phase of a journal commit: \xe2\x80\xa6BeChange the current working directory.AoCloses an open file descriptor.0000EmThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have \xe2\x80\xa6CaSynchronize a file\xe2\x80\x99s in-memory state with disk.CmRepresents an inode in memory, the metadata structure for \xe2\x80\xa6BnRepresent a single inode within a inode array.BoBase of pml4 index occupied for kernel address.AaMake a directory.CmA mutual exclusion primitive useful for protecting shared \xe2\x80\xa6AhELF program header type.DhThe <code>Pager</code> trait defines the interface for memory paging \xe2\x80\xa6AoPage Map Level 4 Entry (PML4E).iReserved.CaA special file for standard input/output streams.CkMarker type for the final phase of a journal commit: TxEnd.AaPage is writable.AdSegment is writable.AnWrite-only access to the file.BaWrites data to a file descriptor.0000BlThe abyss of kernel that operates hardwares.C`Aligns the stack pointer to the given alignment.BdAllocate a Block from the allocator.BcBegins a new journaled transaction.BkReturns the union of the two sets of flags.0000000BfChanges the current working directory.BbIndicates 32-bit or 64-bit format.AaClears the entry.000CjClears all entries from the page table and deallocates \xe2\x80\xa6CmClears the current mapping by returning the physical page \xe2\x80\xa6AdCloses an open file.AgGet cpuid of this core.AhDisplay a debug message.0AnReturns an empty set of flags.0000000BiThe file descriptor table of the process.BiGet the flags associated with this entry.00CdGet the flags associated with this page table entry.AgFlags for system calls.BmSynchronizes in-memory file contents to disk.ChThe type of the file (e.g., regular file, directory, \xe2\x80\xa60AcIndex to the inode.CiInternal index tracking progress through <code>tx</code>.CgGet a reference to the underlying slice of the page \xe2\x80\xa60BcThe shared state of the page cache.BjThe inode number of the file or directory.AbInode abstraction.CiReturns the range of the block address of the Inode[] \xe2\x80\xa6BoThe inode associated with this directory entry.BdThe inode associated with this file.BiThe inode associated with this directory.DoThe ELF magic number (<code>0x7F</code> followed by <code>ELF</code> in ASCII).AnJournal magic: \xe2\x80\x9cKeOSJOUR\xe2\x80\x9d.BcFile system magic: \xe2\x80\x9cKeOSFFS\\0\xe2\x80\x9d.BbFile system magic: \xe2\x80\x9cKeOSFFSI\xe2\x80\x9d.CiCreates a new directory in the current working directory.fMutex.B`Pager, a trait for paging policyDdThe pager that handles memory allocation (<code>mmap</code>) and \xe2\x80\xa6BmReturns an iterator over the program headers.AgPrints out the message.0AlSlab allocator for Slab1024.AlSlab allocator for Slab2048.AlSlab allocator for Slab4096.AlSlab allocator for Slab8192.AaSpawn the thread.BjSplit the ContigPages into multiple pages.lThread StackAdRun the given tests.AdState of the thread.CjThis steals the ownership even if the value is locked. \xe2\x80\xa6AmStores a value into the bool.B`Stores a value into the pointer.BgStores a value into the atomic integer.000000000ChThe system call number that identifies the requested \xe2\x80\xa6oTransaction id.00BeUnique identifier of the transaction.mSegment type.BiCore type definitions for the filesystem.EcReturns the union of between the flags in <code>self</code> and <code>other</code>.0000000DdUnmap the given virtual address (<code>va</code>) and return the \xe2\x80\xa6CkLocks this rwlock with exclusive write access, blocking \xe2\x80\xa6BmWrite 512 bytes to disk starting from sector.BjWrites data from the buffer into the file.CkWrites a 4096-byte page of data into the specified file \xe2\x80\xa6AlWrites data to the teletype.BjWrites data to the serial teletype (COM1).AlWrites data to an open file.ClAcquires a write guard to the block, registering it with \xe2\x80\xa6CfWrites a 4096-byte data into the specified file block.AfCreate a regular file.CiRepresents a directory entry as visible to user-space \xe2\x80\xa6AoThread is exited with exitcode.CfInterpreter path (for dynamically linked executables).AaUnmap the memory.000AlExec format error. (ENOEXEC)CaSegment permission flags for ELF program headers.AaThread is parked.AdA reader-writer lockBoA global serial device protected by a spinlock.BjSector, an access granuality for the disk.BnThe sending-half of <code>channel</code> type.BoA serial teletype interface for x86_64 systems.AfAn thread abstraction.ChA thread state of project 4, which contains file and \xe2\x80\xa6ChA thread state of project 5, which contains file and \xe2\x80\xa6AfStruct for TLB requestnUnlink a file.CnA mutable reference to a page table entry (PTE) associated \xe2\x80\xa6CdReturns a mutable pointer to the underlying pointer.CdReturns a mutable pointer to the underlying integer.000000000BhA wrapper around the core::sync::atomic.CgReturns the intersection between the two sets of flags.0000000ChReturns the left flags, but with all the right flags \xe2\x80\xa60000000CmThe expected view of the disk after all journaled changes \xe2\x80\xa6CnCommits the transaction to the journal and applies changes \xe2\x80\xa6BaCreate an entry in the directory.CbCreates a new empty file in the current directory.EhMap a physical address (<code>pa</code>) to a virtual address (<code>va</code>) with \xe2\x80\xa6CfObject file type (e.g., executable, shared object, \xe2\x80\xa6DcConsume the <code>StackBuilder</code> and return the stack pointer.CfExplictly drops the modified metadata block to the \xe2\x80\xa6AcA parsed ELF headerClAn indirect block, which contains pointers to additional \xe2\x80\xa60CgIn-memory table mapping inode numbers to their live \xe2\x80\xa6BeInserts the specified flags in-place.0000000CcInsert a new <code>Slot</code> into the page cache.CiReturns <code>true</code> if all flags are currently set.0000000AaLaunch the frame.lELF Loading.BnA handle to the memory loader for this region.CmMemory unmap function (<code>munmap</code>) for eager paging.BcUnmaps a memory-mapped file region.BiUnmaps a previously mapped memory region.ClMemory unmap function (<code>munmap</code>) for lazy paging.CcExtracts the page offset from the physical address.CgExtracts the offset within the memory page from the \xe2\x80\xa6BlPage Directory Pointer table Index (PDPTEI).B`Page Map Level 4 Index (PML4EI).CjReload in-memory structure to synchronize with on-disk \xe2\x80\xa6CfRemaining time slice for the currently running thread.BeRemoves the specified flags in-place.0000000CiRemoves a key from the LRUCache, returning the stored \xe2\x80\xa6ClRetains only the elements specified by the predicate. In \xe2\x80\xa6AgRwLock implementations.AmSlab allocator for Slab16384.AmSlab allocator for Slab32768.AmSlab allocator for Slab65536.C`Returns a reference to the global serial device.BhSet the physical address for this entry.000BlWakes up one blocked thread on this condvar.BhReleases a permit back to the semaphore.BnSubmits the modified metadata block to the \xe2\x80\xa60C`Thread abstration, an abstraction of a cpu core.BeToggles the specified flags in-place.0000000BjDefines traits for file system operations.BaUnlink an entry in the directory.BdRemoves a file from the file system.BnReleases the underlying <code>SpinLock</code>.BkReleases the underlying <code>Mutex</code>.CdConsume the handle and unpark the underlying thread.CmThe opaque structure indicating the running thread on the \xe2\x80\xa6AlDynamic linking information.ChGet Physical Address of Page (for grading purposes only)00oIO Error. (EIO)CjA structure representing the journal metadata used for \xe2\x80\xa6BmMaximum number of CPU the kernel can support.0BiRepresent a mapping of contiguous memory.BaNo space left on device. (ENOSPC)ClWhen set, the page fault was caused by a page-protection \xe2\x80\xa60AmA reference of a memory page.AiPer-core scheduler state.ChA process state of project 1, which contains file state.ClA process state of project 2, which contains file struct \xe2\x80\xa6ClA process state of project 3, which contains file struct \xe2\x80\xa6BaRead the contents of a directory.AbThread is running.CmAn iterator that attempts to yield all pending values for \xe2\x80\xa6ChMarker type for the first phase of a journal commit: \xe2\x80\xa6CkMulti-producer, multi-consumer FIFO queue communication \xe2\x80\xa6AnCreates a new bounded channel.AlDirectly mapped data blocks.0AeDeallocate the Block.EdCreates a <code>SpinLock&lt;T&gt;</code>, with the <code>Default</code> value for T.EaCreates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.CgA doubly indirect block, which contains pointers to \xe2\x80\xa60DcWrapper function for the pager\xe2\x80\x99s <code>mmap</code> method. It \xe2\x80\xa6CfProvide a memory-mapped page for the given file block.BkRead a file block into the provided buffer.CiMemory address of the entry point where execution starts.AiProcessor-specific flags.BnNumber of entries in the program header table.BlOffset of the program header table in bytes.BnNumber of entries in the section header table.BlOffset of the section header table in bytes.DiLoads a journal <code>TxBegin</code> block from disk at the specified \xe2\x80\xa6DhLoads a journal <code>TxEnd</code> block from disk at the specified LBA.BlBuild a page refernce from physical address.C`Constructs a page from a given physical address.AmConstructs a page from a kva.CmExtracts page table indices from a given virtual address (\xe2\x80\xa6D`Returns a mutable reference to the underlying <code>bool</code>.CfReturns a mutable reference to the underlying pointer.CfReturns a mutable reference to the underlying integer.000000000AnGet the current thread\xe2\x80\x99s id.BaGet the thread id of this thread.BgEvent handler for TLB Shootdown requestClGet a reference to the page directory pointed to by this \xe2\x80\xa6CkGet a reference to the page table pointed to by this entry.BaJournaling for Crash Consistency.CbReturns the range of block address of the journal.CkThe current state of the journal (if present), wrapped in aCaA lock-protected handle to the journal structure.BnMake a join handle for Thread <code>th</code>.CbAlignment of the segment (must be a power of two).AdSegment permissions.AnSize of the segment in memory.CdPhysical address (not commonly used in modern OSes).CiVirtual address where the segment should be mapped in \xe2\x80\xa6CfAlign up to the physical address to the page boundary.CkAligns the virtual address up to the nearest page boundary.BfPrints out the message with a newline.0AoThe process model for project1.AnThe process model for project2AoThe process model for project3.AeMultithreaded ProcessAoThe process model for project5.CcReads directory entries from the current directory.DgReturns <code>AtomicBool</code> which contains whether directory is \xe2\x80\xa6DiReturns a reference of <code>AtomicBool</code> which contains whether \xe2\x80\xa61BaWhether the directory is removed,CmChannel for sending read-ahead requests to the background \xe2\x80\xa6AnSlab allocator for Slab131072.AkSystem call infrastructure.DeHandles a <strong>system call</strong> triggered by the user program.AkSystem call abi for x86_64.CbHandles a system call request from a user program.0000DiThe <code>uaccess</code> module provides abstractions for interacting \xe2\x80\xa6DbUpgrade the <code>RwLockReadGuard`` into </code>RwLockWriteGuard`.DcELF version (set to <code>1</code> for the original and current \xe2\x80\xa6AjDisplay a warning message.0CkDeallocate inner blocks and set the inode\xe2\x80\x99s size to zero.CkAn integer type which can be safely shared between threads.0BeThe type of a file in the filesystem.DhThe <code>FileMode</code> enum represents the access modes available \xe2\x80\xa6C`Represents the type of a file in the filesystem.BiGNU-specific: Read-only after relocation.BbGNU-specific: Stack segment flags.DkAn owning iterator over messages on a <code>Receiver</code>, created by \xe2\x80\xa6DaAn Least Recently Used Cache with capacity <code>MAX_SIZE</code>.CkTrait for file system metadata types that can be loaded \xe2\x80\xa6CmA trait for loading the contents of a virtual memory page \xe2\x80\xa6DhThe <code>MmStruct</code> represents the memory state for a specific \xe2\x80\xa6AgOut of memory. (ENOMEM)jNot exist.nFlags for pde.nFlags for pte.C`The receiving half of <code>channel</code> type.AcThread is runnable.CmA mutual exclusion primitive useful for protecting shared \xe2\x80\xa6DhThe <code>Teletype</code> trait represents a generic character-based \xe2\x80\xa6BiCan receive a value through this channel.BfCan send a value through this channel.AlGet capacity of the channel.0BcIndicate journal has been commited.EeReturns <code>true</code> if all of the flags in <code>other</code> are contained \xe2\x80\xa60000000BjWrite a file block through the page cache.AmSize of this header in bytes.BfLogical \xe2\x80\x9cor\xe2\x80\x9d with a boolean value.BhBitwise \xe2\x80\x9cor\xe2\x80\x9d with the current value.000000000DfDumps the memory occupied by a value of type <code>T</code> to the \xe2\x80\xa6CbConvert the physical address to a virtual address.CgGet a reference to the page directory pointer table \xe2\x80\xa6CbConsumes the page, returning its physical address.BeReturns the contained value as a u32.BeReturns the contained value as a u64.CkReturns <code>true</code> if no flags are currently stored.0000000CbIterates over the key-value pairs in the LRUCache.DiThe length of the file or directory name stored in <code>name</code>. \xe2\x80\xa6B`Size of the segment in the file.BlOffset in the file where the segment starts.BjThe current position in the file (offset).BoThe current position in the directory (offset).CfPushes a string onto the stack as a C-style string \xe2\x80\xa6Aaread current cr3.BdReads the contents of the directory.000CkRecovers and commited but not checkpointed transactions \xe2\x80\xa6AnRegister the interrupt handlerB`Register the global file system.ClSets this page table entry to map to the given page with \xe2\x80\xa6AgSMP-supported spinlock.CcA teletype (TTY) interface for character-based I/O.CnReturns an iterator that will attempt to yield all pending \xe2\x80\xa6AnAttempts to acquire this lock.0ChAttempts to acquire this rwlock with shared read access.CgAttempts to return a pending value on this receiver \xe2\x80\xa6CjAttempts to send a value on this channel without blocking.CmWalk through the page table to find mutable reference for \xe2\x80\xa6AiAll possible permissions.CbThe array of slab allocators with different sizes.CkAn integer type which can be safely shared between threads.00CiA raw pointer type which can be safely shared between \xe2\x80\xa6111AhA handle to a directory.lA directory.CaTrait representing a directory in the filesystem.AnA directory of the filesystem.CmRepresents a directory, which contains multiple directory \xe2\x80\xa6CaA directory, which stores a list of file entries.AlAn overlay on the Directory.AoRepresents the ELF file header.CcTerminates the process, by terminating all threads.0AeFile exists. (EEXIST)BoA handle for performing journal I/O operations.CkRepresents the on-disk metadata for the journal superblock.DfThe <code>LazyPager</code> structure implements lazy paging, where \xe2\x80\xa6BmA reference-counted handle to the page cache.BmPage Table Structure for x86_64 Architecture.oFlags for pdpe.CmRepresents page table indices for a given virtual address \xe2\x80\xa6BgBoth Read and Write access to the file.EaAn error returned from the <code>recv</code> function on a <code>Receiver</code>.Abx86_64 Trap frame.AoA trait for a thread scheduler.AcCounting semaphore.ElAn error returned from the <code>Sender::send</code> function on <strong>channel</strong>\xe2\x80\xa6AbUnaligned address.CkA one-time, read-only pointer to a user-space object of \xe2\x80\xa6ClA one-time, write-only pointer to a user-space object of \xe2\x80\xa6DcValidates a given <strong>memory address range</strong> before use.CiChecks whether access to the given virtual address is \xe2\x80\xa6ChThis function ensures that system calls using memory \xe2\x80\xa61CnValidates whether the given memory range is accessible for \xe2\x80\xa6200BbAdds a new entry to the directory.BmWakes up all blocked threads on this condvar.ChCopy a RegularFile\xe2\x80\x99s content into another RegularFile.BnRemove all slots associated with a given file.DnDowngrade the <code>RwLockWriteGuard</code> into <code>RwLockReadGuard</code>.BdTarget instruction set architecture.BgELF version (should be <code>1</code>).ChAdds to the current value, returning the previous value.000000000BgLogical \xe2\x80\x9cand\xe2\x80\x9d with a boolean value.BiBitwise \xe2\x80\x9cand\xe2\x80\x9d with the current value.000000000AoMaximum with the current value.000000000AoMinimum with the current value.000000000BgLogical \xe2\x80\x9cnot\xe2\x80\x9d with a boolean value.ClSubtracts from the current value, returning the previous \xe2\x80\xa6000000000BgLogical \xe2\x80\x9cxor\xe2\x80\x9d with a boolean value.BiBitwise \xe2\x80\x9cxor\xe2\x80\x9d with the current value.000000000CkConvert from underlying bit representation, unless that \xe2\x80\xa60000000BkLoads a Fast File System from a given disk.BgLoads the journal superblock from disk.BiLoads the superblock structure from disk.DnAttempts to create an <code>Elf</code> object from a <code>RegularFile</code>.BfRetrieves an inode from disk or cache.CfRetrieves an in-memory representation of the inode \xe2\x80\xa6CjGet a mutable reference to the underlying slice of the \xe2\x80\xa60AeInterrupt management.CcIncrease the page reference count corresponding to.DfLoads program headers (<code>Phdr</code>s) from an ELF binary into \xe2\x80\xa6AiMemory State of a processBoVirtual memory layout for the new user program.BjCreate a empty <code>PageTableRoot</code>.CeAlign down the physical address to the page boundary.CgAligns the virtual address down to the nearest page \xe2\x80\xa6AcKEOS panic handler.EfRun a function <code>f</code> with <code>ParkHandle</code> for current thread, and \xe2\x80\xa6BjCount of CPUs that processed this request.C`Copy the page contents into the provided buffer.BlPerform readahead on sequential file blocks.BoQueue of threads ready to run on this CPU core.BnThe entry of the KeOS for bootstrap processor.A`Thread schedulerBjGet the reference of the kernel scheduler.jSemaphore.AmSet the flags for this entry.000CiAttempts to lock this rwlock with exclusive write access.AlWrite back the file to disk.0BnWrites the current journal superblock to disk.CnWrite back the dirty portion of the page to the underlying \xe2\x80\xa6BfA loader for anonymous memory regions.CjA boolean type which can be safely shared between threads.AeBad address. (EFAULT)AdBroken pipe. (EPIPE)AcDuplicated mapping.AcPage is executable.AfSegment is executable.Eh<code>EagerPager</code> is a struct that implements the <code>Pager</code> trait. It \xe2\x80\xa6DeThe <code>FileStruct</code> represents the filesystem state for a \xe2\x80\xa6BaA global file system abstraction.B`Trait representing a filesystem.BmGNU-specific: Exception handling information.CiRepresents a fixed-size array of inodes loaded from a \xe2\x80\xa6AhA handle to join thread.CmAn implementation of a \xe2\x80\x9cscoped lock\xe2\x80\x9d of a mutex. When \xe2\x80\xa6BjA handle that represent the parked thread.BgPossible memory permissions for a page.A`Flags for pml4e.AhA round robin scheduler.AnSize of each thread\xe2\x80\x99s stack.CmOn-disk representation of the superblock of the Fast File \xe2\x80\xa6CjA struct representing the system call ABI (Application \xe2\x80\xa6AkA driver for running tests.nJoin a Thread.0CkThe lock could not be acquired at this time because the \xe2\x80\xa6CgReturns the previous value (like __sync_fetch_and_add).CjCommits completed journal transactions to the file system.BlReturns the complement of this set of flags.0000000Bideallocate a block at the given position.EeReturns the difference between the flags in <code>self</code> and <code>other</code>.0000000CiIndex of the section header table entry that contains \xe2\x80\xa6oExit a process.BgThe address that caused the page fault.BhLogical \xe2\x80\x9cnand\xe2\x80\x9d with a boolean value.BjBitwise \xe2\x80\x9cnand\xe2\x80\x9d with the current value.000000000AdFile system objects.CbDoes anyone can send a value through this channel.EeReturns <code>true</code> if there are flags common to both <code>self</code> and \xe2\x80\xa60000000CmConverts this transaction into a 4096-byte block suitable \xe2\x80\xa60CdConsumes the atomic and returns the contained value.00000000000CfConsumes this spinlock, returning the underlying data.CdConsumes this RwLock, returning the underlying data.CcConsumes this mutex, returning the underlying data.ChCast the physical address into a raw <code>usize</code>.DdReturns the raw <code>usize</code> representation of the virtual \xe2\x80\xa6EfConverts the <code>KernelError</code> enum into a corresponding <code>usize</code> \xe2\x80\xa6A`Cast into usize.DeIntrinsics of x86_64 not included in <code>core::arch::x86_64</code>.BjInvalidate the underlying virtual address.CgIndicates whether the page that caused the fault is \xe2\x80\xa6kLazy PagingAlLink count of the directory.BhReturns the link count of the directory.BhNumber of links alive in the filesystem.BmThe number of links alive in the file system.3BkWrite guard protecting the in-memory inode.AgOpens an entry by name.0CnAn overlaying mechanism for appling page cache to any file \xe2\x80\xa6kPage Cache.DgHandles a <strong>page fault</strong> that occurs when accessing an \xe2\x80\xa6CkHandles a page fault by acquiring the memory state lock \xe2\x80\xa6AeHandles a page fault.BlEntries of Page Table and thier permissions.AoFour-Level Page Table of x86_64CnThe page table that maintains mappings between virtual and \xe2\x80\xa6DgGet a ELF segment permissions (<code>PFlags</code>) of this Phdr in \xe2\x80\xa6BcPushes a byte array onto the stack.CaPushes a <code>usize</code> value onto the stack.AnReschedule the current thread.BfDisables all flags enabled in the set.0000000BmTakes an existing entry out of the directory.BfCalled on every timer interrupt (1ms).EaBlocks the current thread while <code>predicate</code> returns <code>true</code>.CnBuffers a metadata block modification for inclusion in the \xe2\x80\xa6CbUpdate the page contents from the provided buffer.CjAcquires an exclusive write lock on both the in-memory \xe2\x80\xa6CkAn integer type which can be safely shared between threads.0CjRepresents the on-disk block allocation bitmap for the \xe2\x80\xa6BbA contiguous pages representation.mGNU-specific.CjRepresents the on-disk inode allocation bitmap for the \xe2\x80\xa6CfRepresents a unique identifier for an inode in the \xe2\x80\xa6AhIs a directory. (EISDIR)CkEnum representing errors that can occur during a kernel \xe2\x80\xa6ClA context that holds the necessary state for loading and \xe2\x80\xa6BbFile name too long. (ENAMETOOLONG)BcNo such file or directory. (ENOENT)AbPanic depth level.BbList of error codes on page fault.0AkA handle to a regular file.oA regular file.CdTrait representing a regular file in the filesystem.BaA regular file on the filesystem.BmA handle to a regular file in the filesystem.BeA regular file, containing user data.AnAn overlay on the RegularFile.AoA possible state of the thread.CdA pointer to a null-terminated C-style string in \xe2\x80\xa6BbFurther specifies the ABI version.AlAttach a task to the thread.CcTotal number of blocks available in the filesystem.BiTotal number of blocks in the filesystem.CfBuilds a user stack and initializes it with arguments.Dk<strong>on-disk layout</strong> of the file system\xe2\x80\x99s metadata structures.BoWrite guard protecting the on-disk inode array.BnSize of a program header table entry in bytes.BnSize of a section header table entry in bytes.AnPager with Eager Paging PolicyCkMixture of exit state (63th and 62th bit) and exit code \xe2\x80\xa6AhFile state of a process.CnComputes the file block number from a byte offset within a \xe2\x80\xa6CiConstructs a new file system instance from an on-disk \xe2\x80\xa6BmIndicate this file system support journaling.CiA indicator that this filesystem have journaling feature.CcTotal number of inodes supported by the filesystem.BiTotal number of inodes in the filesystem.BjGet offset that represented by the sector.ClGet a mutable reference to the page directory pointed to \xe2\x80\xa6CkGet a mutable reference to the page table pointed to by \xe2\x80\xa6CjConverts a logical block address (LBA) to a sector number.BmKill the thread by specified TID (Thread ID).AjPeek a next thread to run.BmPark a thread \xe2\x80\x98th\xe2\x80\x99 and return ParkHandle.BaMulticore Round-Robin Scheduling.AlWait for a thread to finish.DiThis <code>channel</code>\xe2\x80\x99s receiving half has disconnected, so the \xe2\x80\xa6DnThe <strong>channel</strong>\xe2\x80\x99s sending half has become disconnected, and \xe2\x80\xa6BjRepresents a journal transaction is ended.AjNot a directory. (ENOTDIR)BoIterator over program headers in an ELF binary.CeA utility for constructing a user-space stack layout.BfThread magic to detect stack overflow.A`Create a thread.0CfA reference-counted, thread-safe wrapper around an \xe2\x80\xa6DkThe given <code>isize</code> does not indicate an <code>KernelError</code>.DiThe list of the possible reasons that <code>try_recv</code> could not \xe2\x80\xa6DiThe list of the possible error outcomes for the <code>try_send</code> \xe2\x80\xa6CjRepresents a memory-mapped region within a process\xe2\x80\x99s \xe2\x80\xa6CjWhen set, the page fault was caused by a write access. \xe2\x80\xa60AfAdds the set of flags.0000000CgReturns the range of block address of the block bitmap.AhCreate an entry by name.AeAdd an entry by name.DkHandles a page fault by performing <strong>lazy loading</strong> of the \xe2\x80\xa6CgWrite back all dirty slots belonging to the given file.ChFetches the value, and applies a function to it that \xe2\x80\xa600000000000CeDoes anyone can receive a value through this channel.CgReturns the range of block address of the inode bitmap.DhInstalls a <code>File</code> into the process\xe2\x80\x99s file descriptor table.DgReturns the intersection between the flags in <code>self</code> and \xe2\x80\xa60000000CiGet a mutable reference to the page directory pointer \xe2\x80\xa6CjChecks whether a block at the given position is allocated.CjChecks whether a inode at the given position is allocated.EeReturns <code>true</code> if the fault is a <strong>copy-on-write</strong> violation.AaSize of the area.BdReads a journal block from the disk.C`Removes an inode from the in-memory inode table.C`The entry of the KeOS for application processor.AaShutdown the TLB.CcAttempts to allocate a block at the given position.CcAttempts to allocate a inode at the given position.BbUnlinks a directory entry by name.BbRemoves a directory entry by name.DaRun a function <code>f</code> with current thread as an argument.CaWrites all staged metadata blocks to the journal.DkWrites the <code>TxEnd</code> and completes the transaction by updating \xe2\x80\xa6CgA wrapper around a metadata block that resides at a \xe2\x80\xa6BoRepresents an indirect block in the filesystem.AkPermission denied. (EACCES)CgA staged writer for committing a transaction to the \xe2\x80\xa6BdInvalid system call number. (ENOSYS)AbA page table root.AcThe slab allocator.CkAn implementation of a \xe2\x80\x9cscoped lock\xe2\x80\x9d of a spinlock. \xe2\x80\xa6CjStruct for invalidating the TLB (Translation Lookaside \xe2\x80\xa6C`Represents system call numbers used in project1.BoRepresents system call numbers used in project2C`Represents system call numbers used in project3.C`Represents system call numbers used in project4.C`Represents system call numbers used in project5.AoA struct to build a new thread.DbA one-time, read-only pointer to a slice of <code>u8</code> in \xe2\x80\xa6DcA one-time, write-only pointer to a slice of <code>u8</code> in \xe2\x80\xa6CdPhantom data used to track the current commit stage.BgDisables all flags disabled in the set.0000000AiToggles the set of flags.0000000CeWhether trace the transactions for debugging purpose.CmConstructs a new directory entry from an inode number and \xe2\x80\xa6C`Find a mapped page at the given virtual address.BoResolves a virtual address to a page reference.CkFind a mapped page at the given virtual address. If the \xe2\x80\xa6AfProject 1: System CallAlProject 2: Memory ManagementBeProject 3: Advanced Memory ManagementBmProject 4: Synchronization and MultithreadingAfProject 5: File SystemCdPush a thread <code>th</code> into scheduling queue.AoSets the system-wide scheduler.B`Set the scheduler of the kernel.Df<code>StackBuilder</code>, a utility for constructing a user-space \xe2\x80\xa6BkCreate a new thread in the current process.CgRepresents a block that contains multiple directory \xe2\x80\xa6DdA reference-counted wrapper around <code>FastFileSystemInner</code>.CjRepresents an index into a process\xe2\x80\x99s file descriptor \xe2\x80\xa6CiRepresents a journal transaction header used to track \xe2\x80\xa6CdInternal representation of a <code>PageCache</code>.AlThe global page cache state.ChWhen set, one or more page directory entries contain \xe2\x80\xa60BlA RAII implementation of the thread pinning.CjMetadata access and synchronization primitives for the \xe2\x80\xa6BcAllocates a new data block on disk.BiAllocates a new inode in the file system.CbCreate a process with given <code>MmStruct</code>.0CaCreate a thread with given <code>MmStruct</code>.DcConstructs a <code>SyscallAbi</code> instance from the provided \xe2\x80\xa6DdDumps the bytes in <code>buf</code> to the console as hex bytes, \xe2\x80\xa6DkConverts the <code>File</code> into a <code>Directory</code>, if it is one.AjAllocate a page with alignCkSlab allocator implemenation using treiber\xe2\x80\x99s stack, a \xe2\x80\xa6CfWrites the <code>TxBegin</code> marker to the journal.CmSize to be write-backed if dirtied. If the slot is clean, \xe2\x80\xa6BmRepresents a file block number within a file.AkInvalid arguement. (EINVAL)CnRepresents the reason for a page fault in a virtual memory \xe2\x80\xa6CnRAII structure used to release the shared read access of a \xe2\x80\xa6AmToo many open files. (EMFILE)CiIndicates whether the fault was due to a write access \xe2\x80\xa6AmReads a data block from disk.BcSpawn the thread as a parked state.BhA loader for file-backed memory regions.CmRAII structure used to release the exclusive write access \xe2\x80\xa6ClAn RAII implementation of a \xe2\x80\x9cscoped semaphore\xe2\x80\x9d. When \xe2\x80\xa6DiStores a value into the <code>bool</code> if the current value is the \xe2\x80\xa6CkStores a value into the pointer if the current value is \xe2\x80\xa6CiStores a value into the atomic integer if the current \xe2\x80\xa6000000000CfReturns the starting block address of the data blocks.CjHandles a copy-on-write (COW) page fault by creating a \xe2\x80\xa6CoConstructs an in-memory <code>Inode</code> from its on-disk \xe2\x80\xa6DeGet specified thread\xe2\x80\x99s <code>ThreadState</code> by TID (Thread ID).DhConverts the in-memory <code>Inode</code> structure into its on-disk \xe2\x80\xa6BhLoad debugging symbols from kernel imageB`Opens a new running transaction.BjSets the return value for the system call.BbWrites a 4 KiB data block to disk.AlBAD file descriptor. (EBADF)AdA Condition VariableAoDirectory not empty (ENOTEMPTY)CiWhen set, the page fault was caused by an instruction \xe2\x80\xa60AcInvalid permission.ChThe inode number of the root directory (<code>/</code>).BfJoin handle for the read-ahead thread.CmFind a mapped page at the given virtual address and apply \xe2\x80\xa6DkHandles a <strong>page fault</strong> by allocating a physical page and \xe2\x80\xa6DmConverts the <code>File</code> into a <code>RegularFile</code>, if it is one.CbA struct to mimic a stack state on context switch.CkRepresents an in-progress file system transaction using \xe2\x80\xa6CmCheck signal for current process and perform an exit when \xe2\x80\xa6BjIn-used count of blocks in the filesystem.AcCondition Variable.ClConvert from underlying bit representation, dropping any \xe2\x80\xa60000000EgInserts the value computed with <code>f</code> into the <code>LRUCache</code> if it \xe2\x80\xa6BjIn-used count of inodes in the filesystem.ClExecutes a closure with mutable access to the underlying \xe2\x80\xa6CfRun a closure with physical address of the page table.CiRuns a given closure with physical address of page table.ClApplies write-protection to all user-accessible pages in \xe2\x80\xa6CcA trait for extending file operation functionality.CiRepresent a single directory entry within a directory \xe2\x80\xa6CkRepresents the internal structure of a Fast File System \xe2\x80\xa6BhFile system is corrupted. (EFSCORRUPTED)CaRepresents a logical block address (LBA) on disk.CnConvert from underlying bit representation, preserving all \xe2\x80\xa60000000DmCreate a thread with given <code>MmStruct</code> and <code>FileStruct</code>.BnGet scheudled cpu id of the underlying thread.DkReturns the symmetric difference between the flags in <code>self</code> \xe2\x80\xa60000000<BiWrites a metadata block into the journal.BfOperation is not supported. (ENOTSUPP)BcOperation is not permitted. (EPERM)AiPage Table Mapping Error.CkA guard that provides read-only access to the in-memory \xe2\x80\xa6BiExtension of the <code>FileStruct</code>.CnA read-only guard that provides typed access to a metadata \xe2\x80\xa6CiA guard that provides mutable access to the in-memory \xe2\x80\xa6CnConverts this logical block address into the corresponding \xe2\x80\xa6E`Returns <code>true</code> if the fault is due to <strong>demand paging</strong>.CnA mutable guard for modifying metadata loaded from a block \xe2\x80\xa6BeX86_64\xe2\x80\x99s general purpose registers.ClExecutes a closure with mutable access to the underlying \xe2\x80\xa6AiThe context-switch magic.CnConverts this inode number into the corresponding location \xe2\x80\xa6BlA builder for system configuration settings.1DfCreate a new <code>PageTableRoot</code> that allowed to access the \xe2\x80\xa6")