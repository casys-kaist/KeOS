searchState.loadedDescShard("keos_project5", 0, "Project 5: File System\nChange the current working directory.\nCloses an open file descriptor.\nCreate a regular file.\nTerminates the calling thread.\nTerminates the process, by terminating all threads.\nFork the process.\nSynchronize a file’s in-memory state with disk.\nGet Physical Address of Page (for grading purposes only)\nMake a directory.\nMap the memory.\nUnmap the memory.\nOpens a file and returns a file descriptor.\nCreate an interprocess communication channel.\nReads data from a file descriptor.\nRead the contents of a directory.\nMoves the file offset of an open file.\nStat a file.\nRepresents system call numbers used in project5.\nRetrieves the current file offset.\nCreate a thread.\nJoin a Thread.\nUnlink a file.\nWrites data to a file descriptor.\nExtension of the <code>FileStruct</code>.\nFast File System (FFS).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Least Recently Used (LRU) Cache.\nPage Cache.\nThe process model for project5.\nA trait for extending file operation functionality.\nRepresents a directory entry as visible to user-space …\nRepresents the basic metadata of a file or directory …\nChanges the current working directory.\nCreates a new empty file in the current directory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSynchronizes in-memory file contents to disk.\nThe inode number corresponding to the file or directory.\nThe inode number of the file or directory.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new directory in the current working directory.\nThe name of entry in null-terminated string.\nCreate a <code>Stat</code> struct for the file.\nReads directory entries from the current directory.\nThe size of the file in bytes.\nRetrieves file metadata.\nThe type of the file:\nRemoves a file from the file system.\nA reference-counted wrapper around <code>FastFileSystemInner</code>.\nRepresents the internal structure of a Fast File System …\nA handle for performing journal I/O operations.\nThe inode number of the root directory (<code>/</code>).\nMetadata access and synchronization primitives for the …\nAllocates a new data block on disk.\nAllocates a new inode in the file system.\nReturns the range of block address of the block bitmap.\nTotal number of blocks available in the filesystem.\nThe expected view of the disk after all journaled changes …\nReturns the starting block address of the data blocks.\nWhether trace the transactions for debugging purpose.\nThe underlying disk device used by the filesystem.\n<strong>on-disk layout</strong> of the file system’s metadata structures.\nA reference to the file system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a Fast File System from a given disk.\nConstructs a new file system instance from an on-disk …\nFile system objects.\nRetrieves an inode from disk or cache.\nRetrieves an in-memory representation of the inode …\nConverts this inode number into the corresponding location …\nConverts this inode number into the corresponding location …\nIndicate this file system support journaling.\nInode abstraction.\nReturns the range of the block address of the Inode[] …\nReturns the range of block address of the inode bitmap.\nTotal number of inodes supported by the filesystem.\nIn-memory table mapping inode numbers to their live …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJournaling for Crash Consistency.\nReturns the range of block address of the journal.\nThe current state of the journal (if present), wrapped in a\nOpens a new running transaction.\nReads a data block from disk.\nReads a journal block from the disk.\nRemoves an inode from the in-memory inode table.\nOn-disk superblock structure, wrapped in metadata-aware …\nCore type definitions for the filesystem.\nWrites a 4 KiB data block to disk.\nWrites a metadata block into the journal.\nA wrapper around a metadata block that resides at a …\nA read-only guard that provides typed access to a metadata …\nA mutable guard for modifying metadata loaded from a block …\nTrait for file system metadata types that can be loaded …\nA reference-counted, thread-safe wrapper around an …\nA guard that provides read-only access to the in-memory …\nA guard that provides mutable access to the in-memory …\nMarker to associate the block with its metadata type.\nMarker to associate the block with its metadata type.\nMarker to associate this block with metadata type <code>M</code>.\nSpinlock guard for the raw block data.\nSpinlock guard protecting the block contents.\nThe in-memory contents of the block, protected by a …\nWrite guard protecting the on-disk inode array.\nEnsures the spinlock is released when the guard goes out …\nPanics if the guard is dropped without calling <code>submit</code>.\nPanics if the guard is dropped without calling <code>submit</code>.\nExplictly drops the modified metadata block to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex to the inode.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogical block address of the block being modified.\nLogical block address (LBA) where this block resides on …\nLoads a metadata structure from disk at the specified …\nWrite guard protecting the in-memory inode.\nCreate a new <code>TrackedInode</code> reference.\nAcquires a read-only guard to the underlying block …\nAcquires a shared read lock on the in-memory inode.\nReload in-memory structure to synchronize with on-disk …\nSubmits the modified metadata block to the …\nSubmits the modified metadata block to the …\nMutable reference to the ongoing transaction.\nAcquires a write guard to the block, registering it with …\nAcquires an exclusive write lock on both the in-memory …\nRepresents the on-disk block allocation bitmap for the …\nRepresents a block that contains multiple directory …\nRepresent a single directory entry within a directory …\nRepresents an indirect block in the filesystem.\nRepresent a single inode within a inode array.\nRepresents a fixed-size array of inodes loaded from a …\nRepresents the on-disk inode allocation bitmap for the …\nRepresents the on-disk metadata for the journal superblock.\nRepresents a journal transaction header used to track …\nRepresents a journal transaction is ended.\nOn-disk representation of the superblock of the Fast File …\nPadding to fill a full block (4096 bytes).\nPadding to align to Block size.\nA padding to align to the power of two.\nTotal number of blocks in the filesystem.\nIn-used count of blocks in the filesystem.\nIndicate journal has been commited.\nDirectly mapped data blocks.\ndeallocate a block at the given position.\nA doubly indirect block, which contains pointers to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads the journal superblock from disk.\nLoads the superblock structure from disk.\nConstructs a new directory entry from an inode number and …\nLoads a journal <code>TxBegin</code> block from disk at the specified …\nLoads a journal <code>TxBegin</code> block from disk at the specified …\nThe type of the file (e.g., regular file, directory, …\nA indicator that this filesystem have journaling feature.\nAn indirect block, which contains pointers to additional …\nThe unique inode number assigned to this file or directory.\nThe inode associated with this directory entry.\nTotal number of inodes in the filesystem.\nIn-used count of inodes in the filesystem.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this transaction into a 4096-byte block suitable …\nConverts this transaction into a 4096-byte block suitable …\nChecks whether a block at the given position is allocated.\nChecks whether a inode at the given position is allocated.\nArray of logical block addresses involved in the …\nThe number of links alive in the file system.\nJournal magic: “KeOSJOUR”.\nFile system magic: “KeOSFFS\\0”.\nFile system magic: “KeOSFFSI”.\nReturns the name of the directory entry as a string slice.\nThe name of the file or directory. Only the first <code>name_len</code> …\nThe length of the file or directory name stored in <code>name</code>. …\nCreates a new, empty journal <code>TxBegin</code> block.\nCreates a new, empty journal <code>TxBegin</code> block.\nThe total size of the file in bytes.\nAttempts to allocate a block at the given position.\nAttempts to allocate a inode at the given position.\nTransaction id.\nTransaction id.\nTransaction id.\nWrites the current journal superblock to disk.\nRepresents a directory, which contains multiple directory …\nA handle to a regular file in the filesystem.\nAdds a new entry to the directory.\nAdd an entry by name.\nWeak reference to the <code>FastFileSystemInner</code>.\nWeak reference to the file system reference.\nFinds the inode number corresponding to a directory entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInode number of the file.\nInode number of the directory.\nThe inode associated with this file.\nThe inode associated with this directory.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLink count of the directory.\nCreates a new <code>RegularFile</code> from a given inode and filesystem\nCreates a new <code>Directory</code> from the given inode.\nOpens an entry by name.\nReads data from the file into the provided buffer.\nReads the contents of the directory.\nReads the contents of the directory.\nReturns <code>AtomicBool</code> which contains whether directory is …\nWhether the directory is removed,\nReturns the size of the file in bytes.\nReturns the size of the file in bytes.\nTakes an existing entry out of the directory.\nRemoves a directory entry by name.\nWrites a 4096-byte data into the specified file block.\nRepresents an inode in memory, the metadata structure for …\nDirectly mapped data blocks.\nA doubly indirect block, which contains pointers to …\nReturns the argument unchanged.\nConstructs an in-memory <code>Inode</code> from its on-disk …\nThe type of the file (e.g., regular file, directory, …\nRetrieves the logical block address (LBA) corresponding to …\nGrows the inode to include at least the given number of …\nAn indirect block, which contains pointers to additional …\nThe unique inode number assigned to this file or directory.\nCalls <code>U::from(self)</code>.\nConverts the in-memory <code>Inode</code> structure into its on-disk …\nNumber of links alive in the filesystem.\nCreates a new in-memory <code>Inode</code> instance.\nThe total size of the file in bytes.\nDeallocate inner blocks and set the inode’s size to zero.\nMarker type for the second phase of a journal commit: …\nA structure representing the journal metadata used for …\nA staged writer for committing a transaction to the …\nRepresents an in-progress file system transaction using …\nMarker type for the first phase of a journal commit: …\nMarker type for the final phase of a journal commit: TxEnd.\nPhantom data used to track the current commit stage.\nBegins a new journaled transaction.\nCommits completed journal transactions to the file system.\nCommits the transaction to the journal and applies changes …\nReference to the filesystem’s core state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInternal index tracking progress through <code>tx</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O interface for reading/writing disk blocks.\nA lock-protected handle to the journal structure.\nCreates a new <code>JournalWriter</code> in the initial <code>TxBegin</code> stage.\nRecovers and commited but not checkpointed transactions …\nJournal superblock.\nStaged list of (LBA, data) pairs representing metadata …\nUnique identifier of the transaction.\nWrites all staged metadata blocks to the journal.\nBuffers a metadata block modification for inclusion in the …\nWrites the <code>TxBegin</code> marker to the journal.\nWrites the <code>TxEnd</code> and completes the transaction by updating …\nA directory, which stores a list of file entries.\nRepresents the type of a file in the filesystem.\nRepresents a logical block address (LBA) on disk.\nA regular file, containing user data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this logical block address into the corresponding …\nConverts a logical block address (LBA) to a sector number.\nReturns the contained value as a u64.\nCreates a <code>LogicalBlockAddress</code> if the given value is not …\nAn Least Recently Used Cache with capacity <code>MAX_SIZE</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the value corresponding to …\nInserts the value computed with <code>f</code> into the <code>LRUCache</code> if it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the key-value pairs in the LRUCache.\nMakes a new, empty <code>LRUCache</code>.\nInserts a key-value pair into the <code>LRUCache</code>.\nRemoves a key from the LRUCache, returning the stored …\nRetains only the elements specified by the predicate. In …\nA reference-counted handle to the page cache.\nInternal representation of a <code>PageCache</code>.\nThe global page cache state.\nA single entry in the page cache.\nJoin handle for the read-ahead thread.\nProvide a memory-mapped page for the given file block.\nRead a file block into the provided buffer.\nRemove all slots associated with a given file.\nWrite a file block through the page cache.\nWrite back all dirty slots belonging to the given file.\nThe file block number this slot represents.\nThe file this slot belongs to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe file system that the page cache operates on.\nThe shared state of the page cache.\nInsert a new <code>Slot</code> into the page cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new slot for the given file, block, and backing …\nCreate a new page cache associated with the given file …\nAn overlaying mechanism for appling page cache to any file …\nThe backing page containing the block’s data.\nRead a page from the cache or underlying file system.\nCopy the page contents into the provided buffer.\nPerform readahead on sequential file blocks.\nChannel for sending read-ahead requests to the background …\nUpdate the page contents from the provided buffer.\nWrite back the dirty portion of the page to the underlying …\nSize to be write-backed if dirtied. If the slot is clean, …\nAn overlay on the Directory.\nAn overlay on the RegularFile.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA thread state of project 5, which contains file and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandles a system call request from a user program.")