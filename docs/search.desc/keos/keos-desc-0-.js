searchState.loadedDescShard("keos", 0, "KeOS: KAIST Educational Operating System\nBad address. (EFAULT)\nBAD file descriptor. (EBADF)\nBroken pipe. (EPIPE)\nDevice or resource busy. (EBUSY)\nDirectory not empty (ENOTEMPTY)\nFile exists. (EEXIST)\nFile system is corrupted. (EFSCORRUPTED)\nIO Error. (EIO)\nPermission denied. (EACCES)\nInvalid arguement. (EINVAL)\nIs a directory. (EISDIR)\nEnum representing errors that can occur during a kernel …\nMaximum number of CPU the kernel can support.\nFile name too long. (ENAMETOOLONG)\nExec format error. (ENOEXEC)\nOut of memory. (ENOMEM)\nNo space left on device. (ENOSPC)\nNo such file or directory. (ENOENT)\nInvalid system call number. (ENOSYS)\nNot a directory. (ENOTDIR)\nOperation is not supported. (ENOTSUPP)\nOperation is not permitted. (EPERM)\nPanic depth level.\nA builder for system configuration settings.\nA driver for running tests.\nToo many open files. (EMFILE)\nThe given <code>isize</code> does not indicate an <code>KernelError</code>.\nPhysical and Virtual Memory Addressing Schemes.\nMulti-producer, multi-consumer FIFO queue communication …\nDisplay a debug message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFilesystem abstraction.\nDisplay an information message.\nInterrupt management.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>KernelError</code> enum into a corresponding <code>usize</code> …\nIntrinsics of x86_64 not included in <code>core::arch::x86_64</code>.\nRust-specific implemenations.\nMemory Management.\nPrints out the message.\nPrints out the message with a newline.\nThe entry of the KeOS for application processor.\nThe entry of the KeOS for bootstrap processor.\nSets the system-wide scheduler.\nRun the given tests.\nSynchronization primitives.\nSystem call infrastructure.\nTask trait for interact with user process.\nA teletype (TTY) interface for character-based I/O.\nThread abstration, an abstraction of a cpu core.\nDebugging Utilities.\nDisplay a warning message.\nRepresents a kernel virtual address.\nA mask for extracting the offset within a page from a …\nThe shift amount to get the page index from a given …\nThe size of a single page in memory, in bytes.\nRepresents a physical address.\nRepresents a virtual address.\nThe physical address <code>0</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the physical address to a virtual address.\nConverts the virtual address to a physical address.\nCast the physical address into a raw <code>usize</code>.\nReturns the raw <code>usize</code> representation of the virtual …\nReturns the raw <code>usize</code> representation of the virtual …\nConverts the kernel virtual address into a general virtual …\nCreates a new physical address if the address is valid.\nCreates a new kernel virtual address if the address is …\nCreates a new virtual address if the address is valid.\nExtracts the page offset from the physical address.\nExtracts the page offset from the virtual address.\nExtracts the offset within the memory page from the …\nAlign down the physical address to the page boundary.\nAligns the virtual address down to the nearest page …\nAligns the virtual address down to the nearest page …\nAlign up to the physical address to the page boundary.\nAligns the virtual address up to the nearest page boundary.\nAligns the virtual address up to the nearest page boundary.\nThis <code>channel</code>’s receiving half has disconnected, so the …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the <code>channel</code> because it would …\nAn owning iterator over messages on a <code>Receiver</code>, created by …\nAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.\nThe receiving half of <code>channel</code> type.\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nAn error returned from the <code>Sender::send</code> function on <strong>channel</strong>…\nThe sending-half of <code>channel</code> type.\nAn iterator that attempts to yield all pending values for …\nThe list of the possible reasons that <code>try_recv</code> could not …\nThe list of the possible error outcomes for the <code>try_send</code> …\nCan receive a value through this channel.\nCan send a value through this channel.\nGet capacity of the channel.\nGet capacity of the channel.\nCreates a new bounded channel.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDoes anyone can receive a value through this channel.\nDoes anyone can send a value through this channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that will block waiting for messages, …\nAttempts to wait for a value on this receiver, returning …\nSends a value on this channel.\nReturns an iterator that will attempt to yield all pending …\nAttempts to return a pending value on this receiver …\nAttempts to send a value on this channel without blocking.\nA handle to a directory.\nA directory.\nThe disk, a device that has byte sink.\nRepresents a file system entry, which can be either a file …\nRepresents a file block number within a file.\nA global file system abstraction.\nRepresents a unique identifier for an inode in the …\nA handle to a regular file.\nA regular file.\nSector, an access granuality for the disk.\nCreate an entry by name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the file block number from a byte offset within a …\nAdd a hook for the disk.\nInode number of the file.\nInode number of the directory.\nGet <code>InodeNumber</code> of this <code>File</code> regardless of its inner type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>File</code> into a <code>Directory</code>, if it is one.\nGet offset that represented by the sector.\nConverts the <code>File</code> into a <code>RegularFile</code>, if it is one.\nReturns the contained value as a u32.\nCast into usize.\nLink count of the directory.\nMaps a file block into memory.\nCreate a new FsDisk from the index.\nCreates a new <code>RegularFile</code> handle from a given …\nCreates a new <code>Directory</code> handle from a given implementation …\nCreates a <code>InodeNumber</code> if the given value is not zero.\nOpens a path from the directory.\nRead 512 bytes from disk starting from sector.\nReads data from the file into the provided buffer.\nReads the contents of the directory.\nRegister the global file system.\nReturns <code>AtomicBool</code> which contains whether directory is …\nMake the disk read-only.\nRetrieves the root directory of the filesystem.\nReturns the size of the file in bytes.\nReturns the size of the file in bytes.\nGet size of this <code>File</code> regardless of its inner type.\nDefines traits for file system operations.\nUnlinks a directory entry by name.\nWrite 512 bytes to disk starting from sector.\nWrites data from the buffer into the file.\nWrite back the file to disk.\nTrait representing a directory in the filesystem.\nTrait representing a filesystem.\nTrait representing a regular file in the filesystem.\nCreate an entry by name.\nReturns the inode number of the file.\nReturns the inode number of the directory.\nReturns the link count of the directory.\nMaps a file block into memory.\nOpens an entry by name.\nReads data from the file into the provided buffer.\nReads the contents of the directory.\nReturns a reference of <code>AtomicBool</code> which contains whether …\nRetrieves the root directory of the filesystem.\nReturns the size of the file in bytes.\nReturns the size of the file in bytes.\nUnlinks a directory entry by name.\nWrites a 4096-byte page of data into the specified file …\nWrite back the file to disk.\nNo value.\nSome value of type <code>T</code>.\nRegister the interrupt handler\nGet cpuid of this core.\nread current cr3.\nKEOS panic handler.\nSlab allocator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad debugging symbols from kernel image\nThe array of slab allocators with different sizes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Allocator.\nSlab allocator for Slab1024.\nSlab allocator for Slab128.\nSlab allocator for Slab131072.\nSlab allocator for Slab16384.\nSlab allocator for Slab2048.\nSlab allocator for Slab256.\nSlab allocator for Slab32768.\nSlab allocator for Slab4096.\nSlab allocator for Slab512.\nSlab allocator for Slab64.\nSlab allocator for Slab65536.\nSlab allocator for Slab8192.\nSlab allocator implemenation using treiber’s stack, a …\nReturns the previous value (like __sync_fetch_and_add).\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe slab allocator.\nAllocate a Block from the allocator.\nDeallocate the Block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrow the internal blocks by allocating from the physical …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new slab allocator with slab size T.\nA contiguous pages representation.\nA representation of a memory page.\nA reference of a memory page.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a page refernce from physical address.\nConstructs a page from a given physical address.\nConstructs a page from a kva.\nGet a reference to the underlying slice of the page …\nGet a reference to the underlying slice of the page …\nGet a mutable reference to the underlying slice of the …\nGet a mutable reference to the underlying slice of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIncrease the page reference count corresponding to.\nConsumes the page, returning its physical address.\nGet the kernel virtual address of this page.\nGet virtual address of this page.\nGet the kernel virtual address of this page.\nAllocate a page.\nAllocate a new page.\nAllocate a page with align\nGet the physical address of this page.\nGet the physical address of this page.\nEntries of Page Table and thier permissions.\nSplit the ContigPages into multiple pages.\nTLB Shootdown helper.\nAccessed; indicates whether this entry has been used for …\nAccessed; indicates whether this entry has been used for …\nAccessed; indicates whether this entry has been used for …\nAccessed; indicates whether software has accessed the …\nAll possible permissions.\nDirty; indicates whether software has written to the …\nDuplicated mapping.\nPage is executable.\nGlobal; if CR4.PGE = 1, determines whether the translation …\nInvalid permission.\nBase of pml4 index occupied for kernel address.\nNot exist.\nPresent; must be 1 to reference a page-directory-pointer …\nPresent; must be 1 to reference a page directory\nPresent; must be 1 to reference a page table\nPresent; must be 1 to map a 4-KByte page\nIndirectly determines the memory type used to access the …\nPage-level cache disable; indirectly determines the memory …\nPage-level cache disable; indirectly determines the memory …\nPage-level cache disable; indirectly determines the memory …\nPage-level cache disable; indirectly determines the memory …\nProtection key bit 0; if CR4.PKE = 1 or CR4.PKS = 1, this …\nProtection key bit 1; if CR4.PKE = 1 or CR4.PKS = 1, this …\nProtection key bit 2; if CR4.PKE = 1 or CR4.PKS = 1, this …\nProtection key bit 3; if CR4.PKE = 1 or CR4.PKS = 1, this …\nPage size; indicates whether this entry is 2M page.\nPage-level write-through; indirectly determines the memory …\nPage-level write-through; indirectly determines the memory …\nPage-level write-through; indirectly determines the memory …\nPage-level write-through; indirectly determines the memory …\nPage Table Mapping Error.\nA page table root.\nPage Directory Entry (PDE).\nFlags for pde.\nPage Directory Pointer Table Entry (PDPE).\nFlags for pdpe.\nPossible memory permissions for a page.\nPage Map Level 4 Entry (PML4E).\nFlags for pml4e.\nPage Table Entry (PTE).\nFlags for pte.\nFor ordinary paging, ignored; for HLAT paging, restart (if …\nFor ordinary paging, ignored; for HLAT paging, restart (if …\nFor ordinary paging, ignored; for HLAT paging, restart (if …\nFor ordinary paging, ignored; for HLAT paging, restart (if …\nPage is readable.\nRead/write; if 0, writes may not be allowed to the …\nRead/write; if 0, writes may not be allowed to the 1-GByte …\nRead/write; if 0, writes may not be allowed to the 2-MByte …\nRead/write; if 0, writes may not be allowed to the 4-KByte …\nStruct for invalidating the TLB (Translation Lookaside …\nUser/supervisor; if 0, user-mode accesses are not allowed …\nUser/supervisor; if 0, user-mode accesses are not allowed …\nUser/supervisor; if 0, user-mode accesses are not allowed …\nUser/supervisor; if 0, user-mode accesses are not allowed …\nPage can be referred by user application.\nUnaligned address.\nPage is writable.\nIf IA32_EFER.NXE = 1, execute-disable (if 1, instruction …\nIf IA32_EFER.NXE = 1, execute-disable (if 1, instruction …\nIf IA32_EFER.NXE = 1, execute-disable (if 1, instruction …\nIf IA32_EFER.NXE = 1, execute-disable (if 1, instruction …\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nAdds the set of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nToggles the set of flags.\nToggles the set of flags.\nToggles the set of flags.\nClears the entry.\nClears the entry.\nClears the entry.\nClears the entry.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns an empty set of flags.\nGet the flags associated with this entry.\nGet the flags associated with this entry.\nGet the flags associated with this entry.\nGet the flags associated with this page table entry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a reference to the page directory pointed to by this …\nGet a mutable reference to the page directory pointed to …\nGet a reference to the page directory pointer table …\nGet a mutable reference to the page directory pointer …\nGet a reference to the page table pointed to by this entry.\nGet a mutable reference to the page table pointed to by …\nInvalidate the underlying virtual address.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nCreate a new StaleTLBEntry.\nCreate a empty <code>PageTableRoot</code>.\nCreate a new <code>PageTableRoot</code> that allowed to access the …\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nGet the physical address pointed to by this entry.\nGet the physical address pointed to by this entry.\nGet the physical address pointed to by this entry.\nGet the physical address pointed to by this entry.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nSet the flags for this entry.\nSet the flags for this entry.\nSet the flags for this entry.\nSet the flags for this entry.\nSet the physical address for this entry.\nSet the physical address for this entry.\nSet the physical address for this entry.\nSet the physical address for this entry.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nShutdown the TLB.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nStruct for TLB request\nDestination Cr3\nReturns the argument unchanged.\nEvent handler for TLB Shootdown request\nCalls <code>U::from(self)</code>.\nCount of CPUs that processed this request.\nSend the request and wait until the request is done for …\nIf va is Some, invalidate only that page. Otherwise, …\nA wrapper around the core::sync::atomic.\nRwLock implementations.\nSMP-supported spinlock.\nA boolean type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nA raw pointer type which can be safely shared between …\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nReturns a mutable pointer to the underlying pointer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nLogical “and” with a boolean value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nLogical “nand” with a boolean value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nLogical “not” with a boolean value.\nLogical “or” with a boolean value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nLogical “xor” with a boolean value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nConverts a <code>bool</code> into an <code>AtomicBool</code>.\nReturns the argument unchanged.\nConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i8</code> into an <code>AtomicI8</code>.\nConverts an <code>u8</code> into an <code>AtomicU8</code>.\nReturns the argument unchanged.\nConverts an <code>i16</code> into an <code>AtomicI16</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>u16</code> into an <code>AtomicU16</code>.\nReturns the argument unchanged.\nConverts an <code>i32</code> into an <code>AtomicI32</code>.\nConverts an <code>u32</code> into an <code>AtomicU32</code>.\nReturns the argument unchanged.\nConverts an <code>i64</code> into an <code>AtomicI64</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>u64</code> into an <code>AtomicU64</code>.\nConverts an <code>isize</code> into an <code>AtomicIsize</code>.\nReturns the argument unchanged.\nConverts an <code>usize</code> into an <code>AtomicUsize</code>.\nReturns the argument unchanged.\nReturns a mutable reference to the underlying <code>bool</code>.\nReturns a mutable reference to the underlying pointer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nLoads a value from the bool.\nLoads a value from the pointer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nCreates a new <code>AtomicBool</code>.\nCreates a new <code>AtomicPtr</code>.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nStores a value into the bool.\nStores a value into the pointer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the bool, returning the previous value.\nStores a value into the pointer, returning the previous …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nDowngrade the <code>RwLockWriteGuard</code> into <code>RwLockReadGuard</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this RwLock, returning the underlying data.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nLocks this rwlock with shared read access, blocking the …\nThis steals the ownership even if the value is locked. …\nAttempts to acquire this rwlock with shared read access.\nAttempts to lock this rwlock with exclusive write access.\nUpgrade the <code>RwLockReadGuard`` into </code>RwLockWriteGuard`.\nLocks this rwlock with exclusive write access, blocking …\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a …\nThe lock could not be acquired at this time because the …\nCreates a <code>SpinLock&lt;T&gt;</code>, with the <code>Default</code> value for T.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this spinlock, returning the underlying data.\nAcquires a spinlock, blocking the current thread until it …\nCreates a new spinlock in an unlocked state ready for use.\nAttempts to acquire this lock.\nReleases the underlying <code>SpinLock</code>.\nx86_64 Trap frame.\nFlags for system calls.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLaunch the frame.\nCreates a new register frame for a user thread.\nReturns a mutable reference to the instruction pointer (<code>RIP</code>…\nReturns a mutable reference to the stack pointer (<code>RSP</code>).\nThe <code>uaccess</code> module provides abstractions for interacting …\nThe <code>FileMode</code> enum represents the access modes available …\nRead-only access to the file.\nBoth Read and Write access to the file.\nWrite-only access to the file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA pointer to a null-terminated C-style string in …\nA one-time, read-only pointer to a user-space object of …\nA one-time, write-only pointer to a user-space object of …\nA one-time, read-only pointer to a slice of <code>u8</code> in …\nA one-time, write-only pointer to a slice of <code>u8</code> in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads a value of type <code>T</code> from the user-space address.\nReads data from the user-space buffer into a <code>Vec&lt;u8&gt;</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>UserPtrRO</code> instance with the given user-space …\nCreates a new <code>UserPtrWO</code> instance with the given user-space …\nCreates a new <code>UserU8SliceRO</code> instance with the given …\nCreates a new <code>UserU8SliceWO</code> instance with the given …\nCreates a new <code>UserCString</code> instance with the given …\nWrites a value of type <code>T</code> to the user-space address.\nWrites data from a slice to the user-space buffer.\nReads a null-terminated string from the user-space address.\nWhen set, the page fault was caused by an instruction …\nList of error codes on page fault.\nWhen set, the page fault was caused by a page-protection …\nWhen set, one or more page directory entries contain …\nRepresents a <strong>task</strong> executed by a thread.\nWhen set, the page fault was caused while CPL = 3. This …\nWhen set, the page fault was caused by a write access. …\nValidates a given <strong>memory address range</strong> before use.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nHandles a <strong>page fault</strong> that occurs when accessing an …\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nHandles a <strong>system call</strong> triggered by the user program.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nRun a closure with physical address of the page table.\nA global serial device protected by a spinlock.\nA serial teletype interface for x86_64 systems.\nThe <code>Teletype</code> trait represents a generic character-based …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <strong>COM1</strong> serial interface instance.\nReads data from the teletype.\nReads data from the serial teletype (COM1).\nReturns a reference to the global serial device.\nWrites data to the teletype.\nWrites data to the serial teletype (COM1).\nA struct to mimic a stack state on context switch.\nThe opaque structure indicating the running thread on the …\nThread is exited with exitcode.\nThread is idle.\nA handle to join thread.\nA handle that represent the parked thread.\nThread is parked.\nThread is runnable.\nThread is running.\nSize of each thread’s stack.\nThread magic to detect stack overflow.\nAn thread abstraction.\nA struct to build a new thread.\nA RAII implementation of the thread pinning.\nA possible state of the thread.\nCheck signal for current process and perform an exit when …\nAttach a task to the thread.\nThe context-switch magic.\nExit the current thread with <code>exit_code</code>.\nMixture of exit state (63th and 62th bit) and exit code …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet specified thread’s <code>ThreadState</code> by TID (Thread ID).\nGet the current thread’s id.\nGet the thread id of this thread.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoin this handle and returns exit code.\nKill the thread by specified TID (Thread ID).\nThread name\nCreate a new thread builder for thread <code>name</code>.\nMake a join handle for Thread <code>th</code>.\nRun a function <code>f</code> with <code>ParkHandle</code> for current thread, and …\nPin current thread not to be scheduled by blocking …\nThread scheduler\nA stack pointer on context switch.\nSpawn the thread.\nSpawn the thread as a parked state.\nThread Stack\nState of the thread.\nThread id\nThread id of this handle.\nGet scheudled cpu id of the underlying thread.\nConsume the handle and unpark the underlying thread.\nRun a function <code>f</code> with current thread as an argument.\nA First-in-first-out scheduler.\nA trait for a thread scheduler.\nReturns the argument unchanged.\nTransmute this thread into the idle.\nCalls <code>U::from(self)</code>.\nPeek a next thread to run.\nPark a thread ‘th’ and return ParkHandle.\nPush a thread <code>th</code> into scheduling queue.\nReschedule the current thread.\nGet the reference of the kernel scheduler.\nSet the scheduler of the kernel.\nCalled on every timer interrupt (1ms).\nCopy a RegularFile’s content into another RegularFile.\nDumps the memory occupied by a value of type <code>T</code> to the …\nDumps the bytes in <code>buf</code> to the console as hex bytes, …")